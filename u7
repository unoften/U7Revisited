#!/bin/bash
# Wrapper script: Checks for Go, builds u7go if needed, then executes u7go.

# --- Colors (Keep for wrapper messages) ---
CLR_RST="\e[0m" # Reset
CLR_RED="\e[31m" # Error
CLR_GRN="\e[32m" # Success
CLR_YLW="\e[33m" # Warning
CLR_BLU="\e[34m" # Info / Headers
CLR_CYN="\e[36m" # Info / Prompt

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
GO_APP_DIR="${SCRIPT_DIR}/u7go"
GO_APP_NAME="u7go"
# Path where the binary will be BUILT and EXECUTED (inside the go app dir)
GO_BINARY_EXE_PATH="${GO_APP_DIR}/${GO_APP_NAME}"

# --- Helper for error messages ---
print_wrapper_error() {
    echo -e "${CLR_RED}[u7 Wrapper ERROR] $1${CLR_RST}" >&2
}

# --- Argument Parsing for Special Wrapper Commands ---
DO_REBUILD=false
COMMAND_GIVEN=false

if [[ "$1" == "update" ]]; then
    DO_REBUILD=true
    COMMAND_GIVEN=true
fi

# If only update was requested, do it and exit.
if [[ "${DO_REBUILD}" == true ]]; then
    echo -e "${CLR_BLU}[u7 Wrapper] 'update' command detected: Rebuilding u7go...${CLR_RST}"
    # --- Go Check within Rebuild ---
    if ! command -v go &> /dev/null; then
        print_wrapper_error "Cannot rebuild: 'go' command not found in PATH."
        exit 1
    fi
    if ! go version &> /dev/null; then
        print_wrapper_error "Cannot rebuild: 'go version' failed. Check Go installation."
        exit 1
    fi
    # --- End Go Check ---
    if [ ! -d "${GO_APP_DIR}" ]; then
        print_wrapper_error "Cannot rebuild: Go application directory not found: ${GO_APP_DIR}"
        exit 1
    fi
    ORIGINAL_DIR=$(pwd)
    echo "[u7 Wrapper] Changing directory to: ${GO_APP_DIR}" # Removed color
    cd "${GO_APP_DIR}" || exit 1
    echo "[u7 Wrapper] Running command: go build -o \"${GO_APP_NAME}\" ." # Removed color
    rm -f "./${GO_APP_NAME}" # Clear any old binary first
    # Run go mod tidy first in case new dependencies were added
    echo "[u7 Wrapper] Running go mod tidy..."
    if ! go mod tidy; then
        print_wrapper_error "'go mod tidy' failed during update in ${GO_APP_DIR}."
        cd "${ORIGINAL_DIR}"
        exit 1
    fi
    # Now build
    if go build -o "${GO_APP_NAME}" .; then
        echo -e "${CLR_GRN}[u7 Wrapper] u7go update successful: ${GO_BINARY_EXE_PATH}${CLR_RST}"
        ls -l "${GO_BINARY_EXE_PATH}" # Show details of the new file
        cd "${ORIGINAL_DIR}"
        exit 0
    else
        print_wrapper_error "u7go update failed during build in ${GO_APP_DIR}."
        cd "${ORIGINAL_DIR}"
        exit 1
    fi
fi

# --- Continue with normal checks and execution ---

# 1. Check for Go command
if ! command -v go &> /dev/null; then
    print_wrapper_error "Go command not found in PATH."
    echo -e "${CLR_CYN}  Please install Go (version 1.18 or newer recommended) from:${CLR_RST}"
    echo -e "${CLR_YLW}    https://golang.org/dl/${CLR_RST}"
    echo -e "${CLR_CYN}  Ensure the Go binary directory (usually /usr/local/go/bin or similar) is added to your system PATH.${CLR_RST}"
    exit 1
fi
# 1b. Verify Go command works
if ! go version &> /dev/null; then
     print_wrapper_error "'go' command was found, but 'go version' failed to execute."
     echo -e "${CLR_CYN}  This might indicate a corrupted Go installation or PATH issues.${CLR_RST}"
     echo -e "${CLR_CYN}  Please ensure Go is correctly installed and accessible.${CLR_RST}"
     echo -e "${CLR_YLW}  Download: https://golang.org/dl/${CLR_RST}"
     exit 1
fi
echo "[u7 Wrapper] Found functional Go command." # Removed color

# 2. Check if u7go directory exists
if [ ! -d "${GO_APP_DIR}" ]; then
    print_wrapper_error "Go application source directory not found: ${GO_APP_DIR}" # Matched wording
    exit 1
fi

# 3. Check if u7go binary exists inside u7go/, build if not
if [ ! -f "${GO_BINARY_EXE_PATH}" ]; then
    echo "[u7 Wrapper] Go application binary '${GO_APP_NAME}' not found. Building..." # Removed color, matched wording
    # Store current dir and cd, then restore
    ORIGINAL_DIR=$(pwd)
    echo "[u7 Wrapper] Changing directory to: ${GO_APP_DIR}" # Removed color
    cd "${GO_APP_DIR}" || exit 1 # Exit if cd fails
    
    # Run go mod tidy first to ensure dependencies are present
    echo "[u7 Wrapper] Running go mod tidy..." # Removed color
    if ! go mod tidy; then
        print_wrapper_error "'go mod tidy' failed in ${GO_APP_DIR}." # Matched wording
        cd "${ORIGINAL_DIR}"
        exit 1
    fi

    # Build the application inside the current directory (u7go)
    LOCAL_OUTPUT_NAME="${GO_APP_NAME}" # Output name within the current (u7go) dir
    echo "[u7 Wrapper] Running go build... (Output: ${LOCAL_OUTPUT_NAME})" # Removed color, matched wording
    rm -f "./${LOCAL_OUTPUT_NAME}" # Clear any old binary first
    go build -o "${LOCAL_OUTPUT_NAME}" .
    BUILD_EXIT_CODE=$?
    # echo "[u7 Wrapper] 'go build' exited with code: ${BUILD_EXIT_CODE}" # Removed this debug-like line
    
    # Check if build succeeded and created the file in the current dir
    if [ ${BUILD_EXIT_CODE} -ne 0 ] || [ ! -f "./${LOCAL_OUTPUT_NAME}" ]; then
        print_wrapper_error "'go build' failed to create ${LOCAL_OUTPUT_NAME} in ${GO_APP_DIR} (Exit Code: ${BUILD_EXIT_CODE})." # Matched wording
        # echo -e "${CLR_YLW}[u7 Wrapper] Contents of build directory (${GO_APP_DIR}):${CLR_RST}" # Removed ls
        # ls -la
        cd "${ORIGINAL_DIR}"
        exit 1
    fi

    # Check the final expected path implicitly by the next section
    # echo "[u7 Wrapper] Checking final binary path: ${GO_BINARY_EXE_PATH}" 
    # ls -ld "${GO_BINARY_EXE_PATH}" 
    # if [ -f "${GO_BINARY_EXE_PATH}" ]; then
    #     echo -e "${CLR_GRN}[u7 Wrapper] Target binary successfully created.${CLR_RST}"
    # else
    #     print_wrapper_error "Target binary check failed after build. Something is wrong at ${GO_BINARY_EXE_PATH}."
    #     cd "${ORIGINAL_DIR}"
    #     exit 1
    # fi
        
    echo -e "${CLR_GRN}[u7 Wrapper] Go application built successfully.${CLR_RST}" # Keep green for success
    cd "${ORIGINAL_DIR}"
fi

# 4. Execute the Go application from its location inside u7go/, passing all arguments
echo "[u7 Wrapper] Preparing to execute: ${GO_BINARY_EXE_PATH} ${*} " # Removed color, simplified args display
echo "[u7 Wrapper] --- Executing Go application ---" # Removed color, matched wording

echo # Add a newline for cleaner separation
"${GO_BINARY_EXE_PATH}" "$@" # Execute using the path inside u7go/
GO_EXIT_CODE=$?

# Check exit code and provide wrapper message on failure
if [ ${GO_EXIT_CODE} -ne 0 ]; then
    print_wrapper_error "Go application exited with error code: ${GO_EXIT_CODE}."
fi

exit ${GO_EXIT_CODE} # Exit with the exit code of the Go application

# --- Original script commented out below (for reference if needed) ---
# ... (original content of u7 script would go here, commented out) ... 